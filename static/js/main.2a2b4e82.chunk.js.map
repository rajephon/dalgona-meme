{"version":3,"sources":["slices/dalgona-state.ts","utils/gtag.ts","components/dalgona-form.tsx","js-canny-edge-detector/main.ts","js-canny-edge-detector/canny-edge-detector.ts","images/background.png","images/mask.png","components/dalgona-canvas.tsx","components/dalgona-header.tsx","components/dalgona-footer.tsx","App.tsx","reportWebVitals.ts","rootReducer.ts","store.ts","index.tsx"],"names":["dalgonaState","createSlice","name","initialState","scale","isLoading","download","reducers","changeDalgonaState","state","action","payload","actions","event","category","label","value","window","gtag","event_category","event_label","DalgonaForm","onClickGenerate","React","useState","imgFile","setImgFile","setScale","lt","setLt","ut","setUt","useSelector","dispatch","useDispatch","useEffect","newState","toFixed","console","log","onClickGenerateBtn","a","undefined","alert","start","Date","now","arrayBuffer","imgFileBuf","delta","JSON","stringify","elapsed","onChangeSlider","setValueCallback","_","newValue","error","onChangeInput","e","target","Number","onChangeLowerThreshold","newLt","onChangeUpperThreshold","newUt","type","id","accept","onChange","currentTarget","files","length","file","disabled","Tooltip","title","htmlFor","IconButton","color","aria-label","component","fontSize","Box","Grid","container","spacing","alignItems","item","xs","Typography","gutterBottom","FormGroup","FormControlLabel","control","Checkbox","checked","Slider","track","aria-labelledby","valueLabelDisplay","step","min","max","Input","size","inputProps","style","marginTop","CircularProgress","Button","variant","onClick","startIcon","gaussMatrix","xMatrix","yMatrix","curry","f","n","args","Array","prototype","slice","call","arguments","apply","concat","canvas","image","getContext","drawImage","naturalWidth","naturalHeight","width","clearRect","height","bytes","putImageData","ImageData","Uint8ClampedArray","toConvolution","kernel","radius","time","kernx","kerny","convolution","i","j","innerI","innerJ","toDenormalized","normalized","denormalized","map","timeEnd","getMax","values","reduce","prev","getThresholds","gradientMagnitude","memo","x","filter","toPixels","expanded","forEach","push","detect","pixels","lowerThreshold","upperThreshold","eventCallback","toConvolutionForImg","grayscale","gray","toGrayscale","data","toNormalized","blurred","xDerived","yDerived","index","pom","gradientDirection","y","Math","sqrt","atan2","PI","gradientMagnitudeCapped","res","gradientMagnitudeLt","gradientMagnitudeUt","pass","nastavi","gradientMagnitudeCappedBottom","pom1","pom2","pom3","pom4","pom5","pom6","pom7","pom8","threshold","toGradientMagnitude","convertToImageDataUrl","imageBuffer","buffer","arr","Uint8Array","btoa","byte","String","fromCharCode","toBase64","DalgonaCanvas","imgBuf","CANVAS_BASE_WIDTH","CANVAS_BASE_HEIGHT","DALGONA_BORDER_COLOR","canvasBackgroundRef","useRef","canvasPictureRef","canvasEdgeRef","canvasDownloadRef","imagePictureRef","imageMaskRef","imageEdgeRef","isDragging","setIsDragging","mousePos","setMousePos","imageRelativePos","setImageRelativePos","downloadImage","buildPictureCanvasAsync","then","loadImageAsync","imageUrl","Promise","resolve","reject","img","Image","src","crossOrigin","onload","resetBackgroundAsync","current","ctx","backgroundImg","save","fixedX","fixedY","beginPath","translate","globalCompositeOperation","posX","posY","edgeImage","imWidth","parseInt","imHeight","restore","backgroundCanvas","pictureCanvas","downloadCanvas","downloadContext","url","toDataURL","newWindow","open","focus","onLoading","imageMask","imagePicture","getImageData","onDetectCallback","maskImg","newDalgonaState","postprocess","r","g","b","canvasEdge","newImageData","shadowBlur","shadowColor","relativePosX","relativePosY","imageEdge","onMouseMove","newMousePos","pageX","pageY","gap","newImageRelativePos","position","padding","margin","ref","zIndex","top","left","onMouseDown","onMouseUp","visibility","display","alt","DalgonaHeader","AppBar","Toolbar","sx","flexGrow","DalgonaFooter","Container","maxWidth","paddingTop","borderTop","href","App","setImgBuf","md","newImgBuf","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a2b4e82.chunk.js","sourcesContent":["// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface DalgonaState {\n    scale: number;\n    isLoading: boolean;\n    ut?: number;\n    lt?: number;\n    download: boolean;\n}\n\nexport const dalgonaState = createSlice({\n    name: \"dalgona-state\",\n    initialState: {\n        scale: 1.0,\n        isLoading: false,\n        download: false,\n    } as DalgonaState,\n    reducers: {\n        changeDalgonaState(state, action: PayloadAction<DalgonaState>) {\n            return action.payload;\n        }\n    },\n})\n\nexport const { changeDalgonaState } = dalgonaState.actions;\nexport default dalgonaState.reducer;\n","export const GA_TRACKING_ID = \"G-33NP429JXQ\";\n\n// https://developers.google.com/analytics/devguides/collection/gtagjs/pages\nexport const pageview = (url: URL) => {\n    window.gtag(\"config\", GA_TRACKING_ID, {\n        page_path: url\n    });\n};\n\ntype GTagEvent = {\n    action: string;\n    category: string;\n    label: string;\n    value: number;\n};\n\n// https://developers.google.com/analytics/devguides/collection/gtagjs/events\nexport const event = ({ action, category, label, value }: GTagEvent) => {\n    window.gtag(\"event\", action, {\n        event_category: category,\n        event_label: label,\n        value: value\n    });\n};\n","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport React, {FunctionComponent} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {ReducerType} from \"../rootReducer\";\nimport Button from \"@mui/material/Button\";\nimport PhotoCamera from \"@mui/icons-material/PhotoCamera\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Slider from \"@mui/material/Slider\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport Grid from \"@mui/material/Grid\";\nimport Input from \"@mui/material/Input\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport {DalgonaState, changeDalgonaState} from \"../slices/dalgona-state\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport DownloadIcon from \"@mui/icons-material/Download\";\nimport AutoFixHighIcon from \"@mui/icons-material/AutoFixHigh\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport * as gtag from \"../utils/gtag\";\n\n\ndeclare namespace IDalgonaForm {\n    export interface IProp {\n        onClickGenerate: (imgBuf: ArrayBuffer) => void,\n    }\n}\n\nconst DalgonaForm: FunctionComponent<IDalgonaForm.IProp> = ({onClickGenerate}) => {\n    const [imgFile, setImgFile] = React.useState<File>();\n    const [scale, setScale] = React.useState<number | string>(1.0);\n    const [lt, setLt] = React.useState<number | string>(\"\");\n    const [ut, setUt] = React.useState<number | string>(\"\");\n    const dalgonaState = useSelector<ReducerType, DalgonaState>(state => state.dalgonaState);\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (typeof scale === \"number\") {\n            const newState = {...dalgonaState};\n            newState.scale = scale;\n            dispatch(changeDalgonaState(newState));\n        }\n    }, [scale]);\n\n    React.useEffect(() => {\n        if (dalgonaState.lt === lt)\n            return;\n\n        setLt(dalgonaState?.lt?.toFixed(2) ?? \"\");\n    }, [dalgonaState.lt]);\n\n    React.useEffect(() => {\n        if (dalgonaState.ut === ut)\n            return;\n        setUt(dalgonaState?.ut?.toFixed(2) ?? \"\");\n    }, [dalgonaState.ut]);\n\n    React.useEffect(() => {\n        console.log(`dalgonaState.isLoading: ${dalgonaState.isLoading}`);\n    }, [dalgonaState.isLoading])\n\n\n    const onClickGenerateBtn = async () => {\n        if (imgFile === undefined) {\n            alert(\"사용할 이미지를 선택해주세요.\");\n            return;\n        }\n        const start = Date.now();\n\n        const imgFileBuf = await imgFile.arrayBuffer();\n        onClickGenerate(imgFileBuf);\n        const delta = Date.now() - start;\n        gtag.event({\n            action: \"generate\",\n            category: \"click\",\n            label: JSON.stringify({elapsed:delta}),\n            value: 0\n        });\n    }\n\n    const onChangeFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n        console.log(e.target.value);\n        console.log(e.currentTarget.files);\n        if (e.currentTarget.files && e.currentTarget.files.length > 0) {\n            const file = e.currentTarget.files[0];\n            setImgFile(file);\n        }\n    }\n\n    const onChangeSlider = (setValueCallback: (value: number) => void) => {\n        return (_: Event, newValue: number | number[]) => {\n            if (typeof newValue === \"number\") {\n                setValueCallback(newValue as number);\n            } else {\n                console.error(`invalid type of newValue (type: ${typeof newValue})`);\n            }\n        }\n    }\n\n    const onChangeInput = (setValueCallback: (value: number | string) => void) => {\n        return (e: React.ChangeEvent<HTMLInputElement>) => {\n            setValueCallback((e.target.value === \"\") ? \"\" : Number(e.target.value));\n        }\n    }\n\n    const onChangeLowerThreshold = (newLt: number | string) => {\n        setLt(newLt);\n\n        const newState: DalgonaState = {...dalgonaState};\n        newState.lt = (typeof newLt === \"number\") ? newLt : undefined;\n        dispatch(changeDalgonaState(newState));\n    }\n\n    const onChangeUpperThreshold = (newUt: number | string) => {\n        setUt(newUt);\n\n        const newState: DalgonaState = {...dalgonaState};\n        newState.ut = (typeof newUt === \"number\") ? newUt : undefined;\n        dispatch(changeDalgonaState(newState));\n    }\n\n    const onChangeLtAutoCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const checked = event.target.checked;\n        const newLt = checked ? \"\" : 0.01;\n\n        onChangeLowerThreshold(newLt);\n    }\n\n    const onChangeUtAutoCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const checked = event.target.checked;\n        const newUt = checked ? \"\" : 0.5;\n\n        onChangeUpperThreshold(newUt);\n    }\n\n    const onClickDownloadBtn = () => {\n        const newState:DalgonaState = {...dalgonaState};\n        newState.download = true;\n        dispatch(changeDalgonaState(newState));\n\n        gtag.event({\n            action: \"download\",\n            category: \"click\",\n            label: \"\",\n            value: 0\n        });\n    };\n\n    return (\n        <form>\n            <input type=\"file\" id=\"input-photo\" accept=\"image/*\" onChange={onChangeFileInput}\n                   disabled={dalgonaState.isLoading}/>\n            <Tooltip title=\"Select image\">\n                <>\n                    <label htmlFor=\"input-photo\">\n                        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\"\n                                    disabled={dalgonaState.isLoading}>\n                            <PhotoCamera fontSize=\"large\"/>\n                        </IconButton>\n                    </label>\n                    <Box>\n                        <Grid container spacing={2} alignItems=\"center\">\n                            <Grid item xs={6}>\n                                <Typography id=\"lt-slider\" gutterBottom>Lower Threshold (0-1)</Typography>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <FormGroup>\n                                    <FormControlLabel control={<Checkbox\n                                        disabled={dalgonaState.isLoading}\n                                        checked={dalgonaState.lt === undefined}\n                                        onChange={onChangeLtAutoCheckbox}\n                                    />} label={\"auto\"}/>\n                                </FormGroup>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                    <Box>\n                        <Grid container spacing={2} alignItems=\"center\">\n                            <Grid item xs={10}>\n                                <Slider track={false}\n                                        aria-labelledby=\"lt-slider\"\n                                        valueLabelDisplay=\"auto\"\n                                        value={dalgonaState.lt === undefined ? 0.0 : dalgonaState.lt}\n                                        onChange={onChangeSlider(onChangeLowerThreshold)}\n                                        step={0.01}\n                                        min={0}\n                                        max={1.0}\n                                        disabled={dalgonaState.isLoading}\n                                />\n                            </Grid>\n                            <Grid item xs>\n                                <Input\n                                    value={lt}\n                                    size=\"small\"\n                                    inputProps={{\n                                        min: 0,\n                                        max: 1,\n                                        step: 0.01,\n                                        type: \"number\",\n                                        'aria-labelledby': \"lt-slider\",\n                                    }}\n                                    onChange={onChangeInput(onChangeLowerThreshold)}\n                                    disabled={dalgonaState.isLoading}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Box>\n\n                    <Box>\n                        <Grid container spacing={2} alignItems=\"center\">\n                            <Grid item xs={6}>\n                                <Typography id=\"ut-slider\" gutterBottom>\n                                    Upper Threshold (0-1)\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <FormGroup>\n                                    <FormControlLabel control={<Checkbox\n                                        disabled={dalgonaState.isLoading}\n                                        checked={dalgonaState.ut === undefined}\n                                        onChange={onChangeUtAutoCheckbox}\n                                    />} label={\"auto\"}/>\n                                </FormGroup>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                    <Box>\n                        <Grid container spacing={2} alignItems=\"center\">\n                            <Grid item xs={10}>\n                                <Slider track={false}\n                                        aria-labelledby=\"ut-slider\"\n                                        valueLabelDisplay=\"auto\"\n                                        value={dalgonaState?.ut ?? 0.0}\n                                        onChange={onChangeSlider(onChangeUpperThreshold)}\n                                        step={0.01}\n                                        min={0}\n                                        max={1.0}\n                                        disabled={dalgonaState.isLoading}\n                                />\n                            </Grid>\n                            <Grid item xs>\n                                <Input\n                                    value={ut}\n                                    size=\"small\"\n                                    inputProps={{\n                                        min: 0,\n                                        max: 1,\n                                        step: 0.01,\n                                        type: \"number\",\n                                        'aria-labelledby': \"ut-slider\",\n                                    }}\n                                    onChange={onChangeInput(onChangeUpperThreshold)}\n                                    disabled={dalgonaState.isLoading}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Box>\n                    <Box>\n                        <Typography id=\"scale-slider\" gutterBottom>\n                            Image scale\n                        </Typography>\n                        <Grid container spacing={2} alignItems=\"center\">\n                            <Grid item xs={10}>\n                                <Slider track={false}\n                                        aria-labelledby=\"scale-slider\"\n                                        valueLabelDisplay=\"auto\"\n                                        value={typeof scale === \"number\" ? scale : 1.0}\n                                        onChange={onChangeSlider(setScale)}\n                                        step={0.1}\n                                        min={0.1}\n                                        max={2.0}\n                                        disabled={dalgonaState.isLoading}\n                                />\n                            </Grid>\n                            <Grid item xs>\n                                <Input\n                                    value={scale}\n                                    size=\"small\"\n                                    inputProps={{\n                                        min: 0.1,\n                                        max: 2,\n                                        step: 0.1,\n                                        type: \"number\",\n                                        'aria-labelledby': \"scale-slider\",\n                                    }}\n                                    onChange={onChangeInput(setScale)}\n                                    disabled={dalgonaState.isLoading}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Box>\n                    <Box style={{marginTop:\"18px\"}}>\n                        <Grid container spacing={2} alignItems=\"center\">\n                            {dalgonaState.isLoading ?\n                                <>\n                                    <Grid item xs={5} />\n                                    <Grid item xs={2}>\n                                        <CircularProgress/>\n                                    </Grid>\n                                    <Grid item xs={5} />\n                                </>\n                                :\n                                <>\n                                    <Grid item xs={6}>\n                                        <Button\n                                            variant=\"outlined\"\n                                            onClick={onClickGenerateBtn}\n                                            startIcon={<AutoFixHighIcon/>} >\n                                            Generate\n                                        </Button>\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        <Button variant=\"outlined\"\n                                                onClick={onClickDownloadBtn}\n                                                startIcon={<DownloadIcon/>} >\n                                            Download\n                                        </Button>\n                                    </Grid>\n                                </>\n                            }\n\n                        </Grid>\n                    </Box>\n                </>\n            </Tooltip>\n        </form>\n    )\n};\n\nexport default DalgonaForm;\n","// implemented from https://github.com/petarjs/js-canny-edge-detector\n\nconst MAX_PRECISION = false\nconst precision = 2\n\nexport const gaussMatrix = [\n    [0.0121, 0.0261, 0.0337, 0.0261, 0.0121],\n    [0.0261, 0.0561, 0.0724, 0.0561, 0.0261],\n    [0.0337, 0.0724, 0.0935, 0.0724, 0.0337],\n    [0.0261, 0.0561, 0.0724, 0.0561, 0.0261],\n    [0.0121, 0.0261, 0.0337, 0.0261, 0.0121]\n]\n\nexport const xMatrix = [ [ 1, 0, -1 ], [ 2, 0, -2 ], [ 1, 0, -1 ] ]\nexport const yMatrix = [ [ -1, -2, -1 ], [ 0, 0, 0 ], [ 1, 2, 1 ] ]\n\nexport const MAX_IMAGE_HEIGHT = 300\n\nfunction curry(f: Function, n?: number): Function {\n    const args = Array.prototype.slice.call(arguments, 0);\n    if (typeof n === 'undefined')\n        args[1] = f.length;\n    if (n === args.length - 2)\n        return f.apply(undefined, args.slice(2));\n    return function() {\n        // @ts-ignore\n        return curry.apply(undefined, args.concat(Array.prototype.slice.call(arguments, 0)));\n    };\n}\n\n// function loadImage(imageUrl: string) {\n//     return new Promise ((resolve, reject) => {\n//         console.time('loadImage')\n//         const img = new Image()\n//         img.src = imageUrl\n//         img.crossOrigin = 'Anonymous'\n//         img.onload = function () {\n//             console.timeEnd('loadImage')\n//             resolve(img)\n//         }\n//     })\n// }\n\nfunction _drawImageOnCanvas(canvas: HTMLCanvasElement, image: CanvasImageSource) {\n    canvas.getContext('2d')?.drawImage(image, 0, 0)\n    return image\n}\n\nconst drawImageOnCanvas = curry(_drawImageOnCanvas)\n\nfunction _setCanvasSizeFromImage(canvas: HTMLCanvasElement, image: HTMLImageElement) {\n    const ratio = image.naturalWidth / image.naturalHeight\n    canvas.style.width = ''\n    canvas.getContext('2d')?.clearRect(0, 0, image.width, image.height);\n    canvas.height = image.height\n    canvas.width = image.width\n    return image\n}\n\nconst setCanvasSizeFromImage = curry(_setCanvasSizeFromImage)\n\nfunction _drawBytesOnCanvas(width: number, height: number, canvas: HTMLCanvasElement, bytes: Uint8Array) {\n    canvas.getContext('2d')?.putImageData(\n            new ImageData(new Uint8ClampedArray(\n                bytes\n            ), width, height),\n            0, 0\n        )\n}\n\nconst drawBytesOnCanvas = curry(_drawBytesOnCanvas)\n\nexport function toGrayscale(bytes: Uint8Array, width: number, height: number): Array<number> {\n    console.time('toGrayscale')\n    const grayscale = []\n    for (let i = 0; i < bytes.length; i += 4) {\n        var gray = .299 * bytes[i + 2] + .587 * bytes[i + 1] + .114 * bytes[i]\n        grayscale.push(gray)\n    }\n    console.timeEnd('toGrayscale')\n\n    return grayscale\n}\n\nfunction _toConvolution (width: number, height: number, kernel: number[][], radius: number, bytes: Uint8Array): number[] {\n    console.time('toConvolution')\n    const convolution = []\n    let newValue, idxX, idxY, kernx, kerny\n    for (let i = 0; i < width; i++) {\n        for (let j = 0; j < height; j++) {\n            newValue = 0\n            for (let innerI = i - radius; innerI < i + radius + 1; innerI++) {\n                for (let innerJ = j - radius; innerJ < j + radius + 1; innerJ++) {\n                    idxX = (innerI + width) % width\n                    idxY = (innerJ + height) % height\n\n                    kernx = innerI - (i - radius)\n                    kerny = innerJ - (j - radius)\n                    newValue += bytes[idxY * width + idxX] * kernel[kernx][kerny]\n\n                }\n            }\n            convolution[j * width + i] = newValue\n        }\n    }\n    console.time('toConvolution')\n\n    return convolution\n}\n\nexport const toConvolution = curry(_toConvolution)\n\n/**\n * From image bytes (0 - 255) to values between 0 and 1\n * @param  {Array<number>} bytes\n * @return {Array}      normalized values\n */\nexport function toNormalized(bytes: Array<number>): Array<number> {\n    console.time('toNormalized')\n\n    const normalized = []\n    for (let i = 0; i < bytes.length; i += 4) {\n        normalized.push(bytes[i] / 255)\n    }\n    console.timeEnd('toNormalized')\n\n    return normalized\n}\n\n/**\n * From normalized array that has values from 0 to 1\n * to image data with values between 0 and 255\n * @param  {Array}  normalized\n * @return {Array}  denormlized\n */\nexport function toDenormalized(normalized: Array<number>): Array<number> {\n    console.time('toDenormalized')\n    const denormalized =  normalized.map(value => value * 255)\n    console.timeEnd('toDenormalized')\n    return denormalized\n}\n\nexport function toGradientMagnitude(\n    xDerived: Array<number>,\n    yDerived: Array<number>,\n    width: number,\n    height: number,\n    lt = 0,\n    ut = 0): any {\n\n    console.time('toGradientMagnitude')\n    const gradientMagnitude = []\n    const gradientDirection = []\n\n    let index\n    let pom\n\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            index = y * width + x\n            gradientMagnitude[index] = Math.sqrt(xDerived[index] * xDerived[index] + yDerived[index] * yDerived[index])\n            pom = Math.atan2(xDerived[index], yDerived[index]);\n            if ((pom >= -Math.PI / 8 && pom < Math.PI / 8) || (pom <= -7 * Math.PI / 8 && pom > 7 * Math.PI / 8)) {\n                gradientDirection[index] = 0;\n            } else if ((pom >= Math.PI / 8 && pom < 3 * Math.PI / 8) || (pom <= -5 * Math.PI / 8 && pom > -7 * Math.PI / 8)) {\n                gradientDirection[index] = Math.PI / 4;\n            } else if ((pom >= 3 * Math.PI / 8 && pom <= 5 * Math.PI / 8) || (-3 * Math.PI / 8 >= pom && pom > -5 * Math.PI / 8)) {\n                gradientDirection[index] = Math.PI / 2;\n            } else if ((pom < -Math.PI / 8 && pom >= -3 * Math.PI / 8) || (pom > 5 * Math.PI / 8 && pom <= 7 * Math.PI / 8)) {\n                gradientDirection[index] = -Math.PI / 4;\n            }\n        }\n    }\n\n    const max = getMax(gradientMagnitude)\n    const gradientMagnitudeCapped = gradientMagnitude.map(x => x / max)\n\n    if (!ut && !lt) {\n        let res = getThresholds(gradientMagnitudeCapped)\n        ut = res.ut\n        lt = res.lt\n    }\n\n    const gradientMagnitudeLt = gradientMagnitudeCapped.map(value => value < lt ? 0 : value)\n\n    for (let y = 1; y < height - 1; y++) {\n        for (let x = 1; x < width - 1; x++) {\n            index = y * width + x\n\n            if (gradientDirection[index] == 0 && (gradientMagnitudeLt[index] <= gradientMagnitudeLt[y * width + x - 1] || gradientMagnitudeLt[index] <= gradientMagnitudeLt[y * width + x + 1]))\n                gradientMagnitudeLt[index] = 0;\n            else if (gradientDirection[index] == Math.PI / 2 && (gradientMagnitudeLt[index] <= gradientMagnitudeLt[(y - 1) * width + x] || gradientMagnitudeLt[(y + 1) * width + x] >= gradientMagnitudeLt[index]))\n                gradientMagnitudeLt[index] = 0;\n            else if (gradientDirection[index] == Math.PI / 4 && (gradientMagnitudeLt[index] <= gradientMagnitudeLt[(y + 1) * width + x - 1] || gradientMagnitudeLt[index] <= gradientMagnitudeLt[(y - 1) * width + x + 1]))\n                gradientMagnitudeLt[index] = 0;\n            else if (gradientDirection[index] == -Math.PI / 4 && (gradientMagnitudeLt[index] <= gradientMagnitudeLt[(y - 1) * width + x - 1] || gradientMagnitudeLt[index] <= gradientMagnitudeLt[(y + 1) * width + x + 1]))\n                gradientMagnitudeLt[index] = 0;\n        }\n    }\n\n    for (let y = 2; y < height - 2; y++) {\n        for (let x = 2; x < width - 2; x++) {\n            if (gradientDirection[y * width + x] == 0)\n                if (gradientMagnitudeLt[y * width + x - 2] > gradientMagnitudeLt[y * width + x] || gradientMagnitudeLt[y * width + x + 2] > gradientMagnitudeLt[y * width + x])\n                    gradientMagnitudeLt[y * width + x] = 0;\n            if (gradientDirection[y * width + x] == Math.PI / 2)\n                if (gradientMagnitudeLt[(y - 2) * width + x] > gradientMagnitudeLt[y * width + x] || gradientMagnitudeLt[(y + 2) * width + x] > gradientMagnitudeLt[y * width + x])\n                    gradientMagnitudeLt[y * width + x] = 0;\n            if (gradientDirection[y * width + x] == Math.PI / 4)\n                if (gradientMagnitudeLt[(y + 2) * width + x - 2] > gradientMagnitudeLt[y * width + x] || gradientMagnitudeLt[(y - 2) * width + x + 2] > gradientMagnitudeLt[y * width + x])\n                    gradientMagnitudeLt[y * width + x] = 0;\n            if (gradientDirection[y * width + x] == -Math.PI / 4)\n                if (gradientMagnitudeLt[(y + 2) * width + x + 2] > gradientMagnitudeLt[y * width + x] || gradientMagnitudeLt[(y - 2) * width + x - 2] > gradientMagnitudeLt[y * width + x])\n                    gradientMagnitudeLt[y * width + x] = 0;\n        }\n    }\n\n    const gradientMagnitudeUt:number[] = gradientMagnitudeLt.map(value => value > ut ? 1 : value)\n\n    // histeresis start\n    let pomH = 0\n    let pomOld = -1\n    let pass = 0\n\n    let nastavi = true\n    let gradientMagnitudeCappedBottom:number[] = []\n    while ( nastavi ) {\n        pass = pass + 1;\n        pomOld = pomH;\n        for (let y = 1; y < height - 1; y++) {\n            for (let x = 1; x < width - 1; x++) {\n                if (gradientMagnitudeUt[y * width + x] <= ut && gradientMagnitudeUt[y * width + x] >= lt) {\n                    let pom1 = gradientMagnitudeUt[(y - 1) * width + x - 1];\n                    let pom2 = gradientMagnitudeUt[(y - 1) * width + x];\n                    let pom3 = gradientMagnitudeUt[(y - 1) * width + x + 1];\n                    let pom4 = gradientMagnitudeUt[y * width + x - 1];\n                    let pom5 = gradientMagnitudeUt[y * width + x + 1];\n                    let pom6 = gradientMagnitudeUt[(y + 1) * width + x - 1];\n                    let pom7 = gradientMagnitudeUt[(y + 1) * width + x];\n                    let pom8 = gradientMagnitudeUt[(y + 1) * width + x + 1];\n\n                    if (pom1 === 1 || pom2 === 1 || pom3 === 1 || pom4 === 1 || pom5 === 1 || pom6 === 1 || pom7 === 1 || pom8 === 1) {\n                        gradientMagnitudeUt[y * width + x] = 1;\n                        pomH = pomH + 1;\n                    }\n                }\n            }\n        }\n\n        if (MAX_PRECISION) {\n            nastavi = pomH != pomOld;\n        } else {\n            nastavi = pass <= precision;\n        }\n\n        gradientMagnitudeCappedBottom = gradientMagnitudeUt.map(x => x <= ut ? 0 : x)\n    }\n\n    console.timeEnd('toGradientMagnitude')\n    return {\n        data: gradientMagnitudeCappedBottom,\n        threshold: {\n            ut: ut,\n            lt: lt\n        }\n    }\n\n}\n\nfunction getMax(values: Array<number>): number {\n    return values.reduce((prev, now) => now > prev ? now : prev, -1)\n}\n\nfunction getThresholds(gradientMagnitude: Array<number>): { ut: number, lt: number } {\n    let sum = 0;\n    let count = 0;\n\n    sum = gradientMagnitude.reduce((memo, x) => x + memo, 0)\n    count = gradientMagnitude.filter(x => x !== 0).length\n\n    const ut = sum / count\n    const lt = 0.4 * ut\n    return { ut, lt }\n}\n\n/**\n * Takes an array of values (0-255) and returns\n * an expaneded array [x, x, x, 255] for each value.\n *\n * @param  {Array}  values\n * @return {Array}  expanded values\n */\nexport function toPixels(values: Array<number>): Array<number> {\n    console.time('toPixels')\n    const expanded:number[] = []\n    values.forEach(x => {\n        expanded.push(x)\n        expanded.push(x)\n        expanded.push(x)\n        expanded.push(255)\n    })\n\n    console.timeEnd('toPixels')\n    return expanded\n}\n","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport {\n    gaussMatrix,\n    toConvolution, toDenormalized,\n    toGradientMagnitude,\n    toGrayscale,\n    toNormalized,\n    toPixels,\n    xMatrix,\n    yMatrix\n} from \"./main\";\n\n\nexport function detect(pixels: Uint8Array, width: number, height: number, lowerThreshold: number|undefined,\n                      upperThreshold: number|undefined, eventCallback:(data:{type:string,data?:number[], threshold?:{lt:number,ut:number}})=>void) {\n\n\n    const toConvolutionForImg = toConvolution(width, height);\n    const grayscale = toPixels(toGrayscale(pixels, width, height));\n    eventCallback({ type: 'grayscale', data: grayscale });\n\n    const normalized = toNormalized(grayscale)\n    eventCallback({type: 'normalized'});\n\n    const blurred = toConvolutionForImg(gaussMatrix, 2, normalized)\n    eventCallback({ type: 'blurred', data: toPixels(toDenormalized(blurred))});\n\n    const xDerived = toConvolutionForImg(xMatrix, 1, blurred)\n    eventCallback({type: 'xAxis', data: toPixels(toDenormalized(xDerived))});\n\n    const yDerived = toConvolutionForImg(yMatrix, 1, blurred)\n    eventCallback({type:'yAxis', data:toPixels(toDenormalized(yDerived))});\n\n    if (lowerThreshold) {\n        if (lowerThreshold > 1)\n            lowerThreshold = 1;\n\n        if (lowerThreshold < 0)\n            lowerThreshold = 0;\n    }\n    if (upperThreshold) {\n        if (upperThreshold > 1)\n            upperThreshold = 1;\n\n        if (upperThreshold < 0)\n            upperThreshold = 0;\n    }\n\n    const gradientMagnitude = toGradientMagnitude(xDerived, yDerived, width, height, lowerThreshold, upperThreshold);\n    eventCallback({type:'gradientMagnitude', data: toPixels(toDenormalized(gradientMagnitude.data)), threshold: gradientMagnitude.threshold});\n\n}\n","export default __webpack_public_path__ + \"static/media/background.d52b6394.png\";","export default __webpack_public_path__ + \"static/media/mask.5c3c32d3.png\";","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport React, {FunctionComponent} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {ReducerType} from \"../rootReducer\";\nimport {DalgonaState, changeDalgonaState} from \"../slices/dalgona-state\";\nimport {detect} from \"../js-canny-edge-detector/canny-edge-detector\";\nimport backgroundImg from \"../images/background.png\";\nimport maskImg from \"../images/mask.png\";\n\ndeclare namespace IDalgonaCanvas {\n    export interface IProps {\n        imgBuf?: ArrayBuffer,\n    }\n}\n\nconst toBase64 = (buffer: ArrayBuffer) => {\n    const arr = new Uint8Array(buffer)\n    return btoa(\n        arr.reduce((data, byte) => data + String.fromCharCode(byte), '')\n    );\n}\n\nconst convertToImageDataUrl = (imageBuffer: ArrayBuffer) => `data:image/png;base64,${toBase64(imageBuffer)}`\n\nconst DalgonaCanvas: FunctionComponent<IDalgonaCanvas.IProps> = ({imgBuf}) => {\n    const CANVAS_BASE_WIDTH = 1543;\n    const CANVAS_BASE_HEIGHT = 770;\n\n    const BASE_POS_X = 818;\n    const BASE_POS_Y = 376;\n\n    // const border\n    const DALGONA_BORDER_COLOR = {\n        r: 82,\n        g: 48,\n        b: 12\n    }\n\n    const canvasBackgroundRef = React.useRef<HTMLCanvasElement>(null);\n    const canvasPictureRef = React.useRef<HTMLCanvasElement>(null);\n    const canvasEdgeRef = React.useRef<HTMLCanvasElement>(null);\n    const canvasDownloadRef = React.useRef<HTMLCanvasElement>(null);\n\n    const imagePictureRef = React.useRef<HTMLImageElement>(null);\n    const imageMaskRef = React.useRef<HTMLImageElement>(null);\n    const imageEdgeRef = React.useRef<HTMLImageElement>(null);\n\n    const [isDragging, setIsDragging] = React.useState<boolean>(false);\n    const [mousePos, setMousePos] = React.useState<{ x: number, y: number }>({x: 0, y: 0});\n    const [imageRelativePos, setImageRelativePos] = React.useState<{ x: number, y: number }>({\n        x: BASE_POS_X,\n        y: BASE_POS_Y\n    });\n\n    const dalgonaState = useSelector<ReducerType, DalgonaState>(state => state.dalgonaState);\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (dalgonaState.download) {\n            downloadImage();\n            const newState:DalgonaState = {...dalgonaState};\n            newState.download = false;\n            dispatch(changeDalgonaState(newState));\n        }\n    }, [dalgonaState.download]);\n\n    React.useEffect(() => {\n        buildPictureCanvasAsync(imageRelativePos.x, imageRelativePos.y).then();\n    }, [dalgonaState.scale]);\n\n    const loadImageAsync = async (imageUrl: string): Promise<HTMLImageElement> => {\n        return new Promise(((resolve, reject) => {\n            const img = new Image()\n            img.src = imageUrl\n            img.crossOrigin = 'Anonymous'\n            img.onload = function () {\n                console.timeEnd('loadImage')\n                resolve(img)\n            }\n        }));\n    }\n\n    const resetBackgroundAsync = async () => {\n        if (typeof canvasBackgroundRef === \"undefined\") {\n            console.time(\"canvasBackgroundRef is undefined\");\n            return;\n        }\n        const canvas = canvasBackgroundRef.current;\n        if (canvas === null) {\n            console.log(\"canvasBackgroundRef.current is null\");\n            return;\n        }\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx === null)\n            return;\n        ctx.drawImage(await loadImageAsync(backgroundImg), 0, 0);\n        ctx.save();\n    }\n\n\n    const buildPictureCanvasAsync = async (fixedX: number, fixedY: number) => {\n        if (typeof canvasPictureRef === \"undefined\" || canvasPictureRef === null) {\n            console.time(\"canvasPictureRef is undefined or null\");\n            return;\n        }\n        if (imagePictureRef === null) {\n            console.time(\"imageRef is null\");\n            return;\n        }\n\n        const canvas = canvasPictureRef.current;\n        if (canvas === null) {\n            console.log(\"canvasPictureRef.current is null\");\n            return;\n        }\n\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx === null)\n            return;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.beginPath();\n\n        // mask for clipping\n        ctx.drawImage(imageMaskRef.current!, 0, 0);\n        ctx.save();\n\n        ctx.translate(CANVAS_BASE_WIDTH / 2, CANVAS_BASE_HEIGHT / 2);\n\n        ctx.globalCompositeOperation = \"source-in\";\n\n        // // calculate position\n        const posX = (-CANVAS_BASE_WIDTH / 2 + fixedX) * dalgonaState.scale;\n        const posY = (-CANVAS_BASE_HEIGHT / 2 + fixedY) * dalgonaState.scale;\n\n        console.log(`posX: ${posX}, posY: ${posY}`);\n\n        const edgeImage = imageEdgeRef.current!;\n        const imWidth = parseInt(edgeImage.width + '') * dalgonaState.scale;\n        const imHeight = parseInt(edgeImage.height + '') * dalgonaState.scale;\n        ctx.drawImage(edgeImage, posX, posY, imWidth, imHeight);\n\n        ctx.restore();\n    }\n\n    const downloadImage = () => {\n        const backgroundCanvas = canvasBackgroundRef.current!;\n        const pictureCanvas = canvasPictureRef.current!;\n\n        const downloadCanvas = canvasDownloadRef.current!;\n        const downloadContext = downloadCanvas.getContext('2d')!;\n\n        downloadContext.drawImage(backgroundCanvas, 0, 0);\n        downloadContext.drawImage(pictureCanvas, 0, 0);\n\n        const url = downloadCanvas.toDataURL();\n        const newWindow = window.open(url, \"_blank\");\n        newWindow?.focus();\n    }\n\n    React.useEffect(() => {\n        resetBackgroundAsync().then();\n    }, [canvasBackgroundRef]);\n\n    React.useEffect(() => {\n        if (imgBuf === undefined)\n            return;\n        if (imagePictureRef === null)\n            return;\n        if (imageMaskRef === null)\n            return;\n\n        onLoading(true);\n\n\n        const imageMask = imageMaskRef.current!;\n        imageMask.onload = () => {\n            const imagePicture = imagePictureRef.current!;\n            imagePicture.onload = () => {\n                if (imgBuf === undefined)\n                    return;\n\n                const canvas = canvasEdgeRef.current!;\n                const ctx = canvas.getContext('2d')!;\n                ctx.clearRect(0, 0, imagePicture.width, imagePicture.height);\n                canvas.height = imagePicture.height;\n                canvas.width = imagePicture.width;\n                console.log(`width: ${canvas.width}`);\n                console.log(`height: ${canvas.height}`);\n\n                ctx.drawImage(imagePicture, 0, 0, imagePicture.width, imagePicture.height);\n                ctx.save();\n                const imageData = ctx!.getImageData(0, 0, imagePicture.width, imagePicture.height);\n                detect(imageData.data as any as Uint8Array, imagePicture.width, imagePicture.height, dalgonaState.lt, dalgonaState.ut, onDetectCallback);\n\n                console.log(\"onload\");\n            };\n            imagePicture.src = convertToImageDataUrl(imgBuf);\n\n        }\n        imageMask.src = maskImg;\n    }, [imgBuf, imagePictureRef, imageMaskRef]);\n\n    const onLoading = (isLoading: boolean) => {\n        const newDalgonaState:DalgonaState = {...dalgonaState};\n        newDalgonaState.isLoading = isLoading;\n        dispatch(changeDalgonaState(newDalgonaState));\n    }\n\n    const postprocess = (buffer: number[]): Uint8ClampedArray => {\n        const pixels = new Uint8ClampedArray(buffer);\n\n        // 색상 반전 및\n        for (let i = 0; i < pixels.length; i += 4) {\n            // 색상 뒤짚기\n            let r = 255 - pixels[i];\n            let g = 255 - pixels[i + 1];\n            let b = 255 - pixels[i + 2];\n\n            if (r === 255 && g === 255 && b === 255) {\n                pixels[i + 3] = 0;\n            } else {\n                r += DALGONA_BORDER_COLOR.r;\n                g += DALGONA_BORDER_COLOR.g;\n                b += DALGONA_BORDER_COLOR.b;\n            }\n\n            pixels[i] = r;\n            pixels[i + 1] = g;\n            pixels[i + 2] = b;\n        }\n\n        return pixels;\n    }\n\n    const onDetectCallback = async ({\n                                        type,\n                                        data,\n                                        threshold\n                                    }: { type: string, data?: number[], threshold?: { lt: number, ut: number } }) => {\n        console.log(`type: ${type}`);\n        if (data === undefined)\n            return;\n        const canvasEdge = canvasEdgeRef.current!;\n        const ctx = canvasEdge!.getContext('2d')!;\n        ctx.clearRect(0, 0, canvasEdge.width, canvasEdge.height)\n\n        const pixels = postprocess(data);\n\n        const newImageData = new ImageData(pixels, canvasEdge.width, canvasEdge.height);\n        ctx.putImageData(newImageData, 0, 0);\n\n        // 덧칠\n        ctx.shadowBlur = 1;\n        ctx.shadowColor = `rgb(${DALGONA_BORDER_COLOR.r}, ${DALGONA_BORDER_COLOR.g}, ${DALGONA_BORDER_COLOR.b})`;\n        ctx.drawImage(canvasEdge, 0, 0);\n\n        const relativePosX = BASE_POS_X - (canvasEdge.width / 2);\n        const relativePosY = BASE_POS_Y - (canvasEdge.height / 2);\n        console.log(`relativePosX: ${relativePosX}, relativePosY: ${relativePosY}`);\n        setImageRelativePos({x: relativePosX, y: relativePosY});\n        setMousePos({x: 0, y: 0});\n\n\n        const imageEdge = imageEdgeRef.current!;\n        imageEdge.onload = async () => {\n            await buildPictureCanvasAsync(relativePosX, relativePosY);\n\n            const newState = {...dalgonaState};\n            newState.isLoading = false;\n            if (threshold) {\n                newState.lt = threshold.lt;\n                newState.ut = threshold.ut;\n            }\n            dispatch(changeDalgonaState(newState));\n        }\n\n        imageEdge.src = canvasEdge.toDataURL();\n\n    }\n\n    const onMouseMove = async (e: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!isDragging) {\n            return;\n        }\n\n        const newMousePos = {x: e.pageX, y: e.pageY};\n        const gap = {\n            x: newMousePos.x - mousePos.x,\n            y: newMousePos.y - mousePos.y\n        };\n\n        const newImageRelativePos = {\n            x: imageRelativePos.x + gap.x,\n            y: imageRelativePos.y + gap.y\n        }\n\n        setMousePos(newMousePos);\n        setImageRelativePos(newImageRelativePos);\n\n        await buildPictureCanvasAsync(newImageRelativePos.x, newImageRelativePos.y);\n    }\n\n    const onMouseDown = (e: React.MouseEvent<HTMLCanvasElement>) => {\n        setIsDragging(true);\n        const newMousePos = {x: e.pageX, y: e.pageY};\n        setMousePos(newMousePos);\n\n        console.log(`mouse down {x: ${e.pageX}, y: ${e.pageY}}`);\n    }\n    const onMouseUp = (_: React.MouseEvent<HTMLCanvasElement>) => {\n        setIsDragging(false);\n        console.log(\"mouse up\")\n    }\n\n    return (\n        <>\n            <div style={{position: \"relative\", padding: 0, margin: 0}}>\n                <canvas ref={canvasBackgroundRef} width={CANVAS_BASE_WIDTH} height={CANVAS_BASE_HEIGHT}\n                        style={{position: \"relative\", width: \"100%\", zIndex: 1}}/>\n                <canvas ref={canvasPictureRef} width={CANVAS_BASE_WIDTH} height={CANVAS_BASE_HEIGHT}\n                        style={{position: \"absolute\", width: \"100%\", zIndex: 2, top: 0, left: 0}}\n                        onMouseDown={onMouseDown} onMouseUp={onMouseUp} onMouseMove={onMouseMove}/>\n                <canvas ref={canvasEdgeRef} width={CANVAS_BASE_WIDTH} height={CANVAS_BASE_HEIGHT}\n                        style={{visibility: \"hidden\", width: \"100%\", zIndex: 2, display: \"none\"}}/>\n                <canvas ref={canvasDownloadRef} width={CANVAS_BASE_WIDTH} height={CANVAS_BASE_HEIGHT}\n                        style={{visibility: \"hidden\", width: \"100%\", zIndex: 2, display: \"none\"}}/>\n                <img ref={imagePictureRef} style={{visibility: \"hidden\", display: \"none\"}} alt=\"\"/>\n                <img ref={imageMaskRef} style={{visibility: \"hidden\", display: \"none\"}} alt=\"\"/>\n                <img ref={imageEdgeRef} style={{visibility: \"hidden\", display: \"none\"}} alt=\"\"/>\n            </div>\n        </>\n    );\n}\n\nexport default DalgonaCanvas;\n","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from '@mui/material/Toolbar';\n\nconst DalgonaHeader = () => {\n    return <AppBar position={\"static\"}>\n        <Toolbar>\n            <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\n                Dalgona meme generator\n            </Typography>\n        </Toolbar>\n    </AppBar>;\n}\n\nexport default DalgonaHeader;\n","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport React from \"react\";\nimport Container from \"@mui/material/Container\";\nimport Typography from \"@mui/material/Typography\";\nimport GitHubIcon from '@mui/icons-material/GitHub';\n\n\nconst DalgonaFooter = () => {\n    return <Container id=\"footer\" maxWidth={\"lg\"} sx={{marginTop: \"15px\", paddingTop: \"15px\", borderTop:\"1px solid #eee\"}}>\n        <Typography component=\"div\" sx={{flexGrow: 1}}>\n            Developed by <a href=\"https://rajephon.dev\" target=\"_blank\">rajephon</a> / <a href=\"https://github.com/rajephon/dalgona-meme\" target=\"_blank\"><GitHubIcon fontSize=\"inherit\" /> Github</a><br />\n            <a href=\"https://github.com/rajephon/dalgona-meme/issues\" target=\"_blank\">Report bug &amp; issue</a>\n        </Typography>\n\n    </Container>;\n}\n\nexport default DalgonaFooter;\n","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport React from 'react';\nimport './App.css';\nimport Grid from \"@mui/material/Grid\";\nimport Container from \"@mui/material/Container\";\nimport DalgonaForm from \"./components/dalgona-form\";\nimport DalgonaCanvas from \"./components/dalgona-canvas\";\nimport DalgonaHeader from \"./components/dalgona-header\";\nimport DalgonaFooter from \"./components/dalgona-footer\";\n\nfunction App() {\n    const [imgBuf, setImgBuf] = React.useState<ArrayBuffer>();\n\n    const onClickGenerate = (newImgBuf: ArrayBuffer) => {\n        setImgBuf(newImgBuf);\n    }\n\n    return (<>\n            <DalgonaHeader />\n            <Container maxWidth={\"lg\"} sx={{marginTop: \"15px\"}}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} md={8}>\n                        <DalgonaCanvas imgBuf={imgBuf} />\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                        <DalgonaForm onClickGenerate={onClickGenerate} />\n                    </Grid>\n                </Grid>\n            </Container>\n            <DalgonaFooter/>\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport { combineReducers } from \"@reduxjs/toolkit\";\nimport dalgonaState from './slices/dalgona-state';\n\nconst reducer = combineReducers({\n    dalgonaState,\n});\n\nexport type ReducerType = ReturnType<typeof reducer>;\nexport default reducer;\n\n","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport reducer from './rootReducer';\nimport logger from 'redux-logger';\n\nconst store = configureStore({\n    reducer,\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n});\n\nexport type AppDispatch = typeof store.dispatch\nexport default store;\n","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}