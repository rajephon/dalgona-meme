{"version":3,"sources":["slices/dalgona-state.ts","utils/gtag.ts","components/dalgona-form.tsx","images/background.png","images/mask.png","slices/result-image-state.ts","components/dalgona-canvas.tsx","components/dalgona-header.tsx","components/dalgona-footer.tsx","components/dalgona-result.tsx","App.tsx","reportWebVitals.ts","rootReducer.ts","store.ts","index.tsx"],"names":["dalgonaState","createSlice","name","initialState","scale","isLoading","generate","reducers","changeDalgonaState","state","action","payload","actions","event","category","label","value","window","gtag","event_category","event_label","DalgonaForm","onClickGenerate","React","useState","imgFile","setImgFile","setScale","lt","setLt","ut","setUt","needApply","setNeedApply","useSelector","dispatch","useDispatch","useEffect","newState","threshold1","toFixed","threshold2","console","log","onClickApplyBtn","a","undefined","alert","start","Date","now","arrayBuffer","imgFileBuf","delta","JSON","stringify","elapsed","onChangeSlider","setValueCallback","_","newValue","error","onChangeLowerThreshold","newLt","onChangeUpperThreshold","newUt","Box","type","id","accept","onChange","e","target","currentTarget","files","length","file","disabled","Tooltip","title","htmlFor","IconButton","color","aria-label","component","fontSize","Grid","container","spacing","alignItems","item","xs","Typography","gutterBottom","FormGroup","FormControlLabel","control","Checkbox","checked","Slider","track","aria-labelledby","valueLabelDisplay","step","min","max","style","marginTop","CircularProgress","Button","width","variant","onClick","startIcon","resultImageState","dataUrl","changeResultImageState","convertToImageDataUrl","imageBuffer","buffer","arr","Uint8Array","btoa","reduce","data","byte","String","fromCharCode","toBase64","DalgonaCanvas","imgBuf","CANVAS_BASE_WIDTH","CANVAS_BASE_HEIGHT","DALGONA_BORDER_COLOR","canvasBackgroundRef","useRef","canvasPictureRef","canvasEdgeRef","canvasDownloadRef","imagePictureRef","imageMaskRef","imageEdgeRef","isDragging","setIsDragging","x","y","mousePos","setMousePos","imageRelativePos","setImageRelativePos","downloadImage","buildPictureCanvasAsync","then","loadImageAsync","imageUrl","Promise","resolve","reject","img","Image","src","crossOrigin","onload","timeEnd","resetBackgroundAsync","time","canvas","current","ctx","getContext","backgroundImg","drawImage","save","fixedX","fixedY","clearRect","height","beginPath","translate","globalCompositeOperation","posX","posY","edgeImage","imWidth","parseInt","imHeight","restore","backgroundCanvas","pictureCanvas","downloadCanvas","downloadContext","newResultImageState","toDataURL","newDalgonaState","onLoading","imageMask","imagePicture","processImage","maskImg","canvasEdge","cv","imread","imgGray","Mat","cvtColor","COLOR_BGR2GRAY","edges","Canny","imshow","imageData","getImageData","pixels","Uint8ClampedArray","i","r","g","b","postprocess","Array","from","newImageData","ImageData","putImageData","shadowBlur","shadowColor","relativePosX","relativePosY","imageEdge","onMouseMove","newMousePos","pageX","pageY","gap","newImageRelativePos","position","padding","margin","ref","zIndex","top","left","onMouseDown","onMouseUp","visibility","display","alt","DalgonaHeader","AppBar","backgroundColor","boxShadow","border","Toolbar","sx","flexGrow","fontWeight","DalgonaFooter","Container","maxWidth","paddingTop","borderTop","href","AlwaysScrollToBottom","elementRef","scrollIntoView","DalgonaResult","App","setImgBuf","md","newImgBuf","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","concat","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.947aa46c.chunk.js","sourcesContent":["// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface DalgonaState {\n    scale: number;\n    isLoading: boolean;\n    threshold2?: number;\n    threshold1?: number;\n    generate: boolean;\n}\n\nexport const dalgonaState = createSlice({\n    name: \"dalgona-state\",\n    initialState: {\n        scale: 1.0,\n        isLoading: false,\n        generate: false,\n    } as DalgonaState,\n    reducers: {\n        changeDalgonaState(state, action: PayloadAction<DalgonaState>) {\n            return action.payload;\n        }\n    },\n})\n\nexport const { changeDalgonaState } = dalgonaState.actions;\nexport default dalgonaState.reducer;\n","export const GA_TRACKING_ID = \"G-33NP429JXQ\";\n\n// https://developers.google.com/analytics/devguides/collection/gtagjs/pages\nexport const pageview = (url: URL) => {\n    window.gtag(\"config\", GA_TRACKING_ID, {\n        page_path: url\n    });\n};\n\ntype GTagEvent = {\n    action: string;\n    category: string;\n    label: string;\n    value: number;\n};\n\n// https://developers.google.com/analytics/devguides/collection/gtagjs/events\nexport const event = ({ action, category, label, value }: GTagEvent) => {\n    window.gtag(\"event\", action, {\n        event_category: category,\n        event_label: label,\n        value: value\n    });\n};\n","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport React, {FunctionComponent} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {ReducerType} from \"../rootReducer\";\nimport Button from \"@mui/material/Button\";\nimport PhotoCamera from \"@mui/icons-material/PhotoCamera\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Slider from \"@mui/material/Slider\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport Grid from \"@mui/material/Grid\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport {DalgonaState, changeDalgonaState} from \"../slices/dalgona-state\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport DownloadIcon from \"@mui/icons-material/Download\";\nimport AutoFixHighIcon from \"@mui/icons-material/AutoFixHigh\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport * as gtag from \"../utils/gtag\";\n\n\ndeclare namespace IDalgonaForm {\n    export interface IProp {\n        onClickGenerate: (imgBuf: ArrayBuffer) => void,\n    }\n}\n\nconst DalgonaForm: FunctionComponent<IDalgonaForm.IProp> = ({onClickGenerate}) => {\n    const [imgFile, setImgFile] = React.useState<File>();\n    const [scale, setScale] = React.useState<number | string>(1.0);\n    const [lt, setLt] = React.useState<number | string>(\"\");\n    const [ut, setUt] = React.useState<number | string>(\"\");\n    const [needApply, setNeedApply] = React.useState<boolean>(false);\n    const dalgonaState = useSelector<ReducerType, DalgonaState>(state => state.dalgonaState);\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (typeof scale === \"number\") {\n            const newState = {...dalgonaState};\n            newState.scale = scale;\n            dispatch(changeDalgonaState(newState));\n        }\n    }, [scale]);\n\n    React.useEffect(() => {\n        if (dalgonaState.threshold1 === lt)\n            return;\n\n        setLt(dalgonaState?.threshold1?.toFixed(2) ?? \"\");\n    }, [dalgonaState.threshold1]);\n\n    React.useEffect(() => {\n        if (dalgonaState.threshold2 === ut)\n            return;\n        setUt(dalgonaState?.threshold2?.toFixed(2) ?? \"\");\n    }, [dalgonaState.threshold2]);\n\n    React.useEffect(() => {\n        console.log(`dalgonaState.isLoading: ${dalgonaState.isLoading}`);\n    }, [dalgonaState.isLoading])\n\n\n    const onClickApplyBtn = async () => {\n        if (imgFile === undefined) {\n            alert(\"사용할 이미지를 선택해주세요.\");\n            return;\n        }\n        const start = Date.now();\n\n        const imgFileBuf = await imgFile.arrayBuffer();\n        onClickGenerate(imgFileBuf);\n        const delta = Date.now() - start;\n        gtag.event({\n            action: \"generate\",\n            category: \"click\",\n            label: JSON.stringify({elapsed: delta}),\n            value: 0\n        });\n\n        setNeedApply(false);\n    }\n\n    const onChangeFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n        console.log(e.target.value);\n        console.log(e.currentTarget.files);\n        if (e.currentTarget.files && e.currentTarget.files.length > 0) {\n            const file = e.currentTarget.files[0];\n            setImgFile(file);\n        }\n        setNeedApply(true);\n    }\n\n    const onChangeSlider = (setValueCallback: (value: number) => void) => {\n        return (_: Event, newValue: number | number[]) => {\n            if (typeof newValue === \"number\") {\n                setValueCallback(newValue as number);\n            } else {\n                console.error(`invalid type of newValue (type: ${typeof newValue})`);\n            }\n        }\n    }\n\n    const onChangeInput = (setValueCallback: (value: number | string) => void) => {\n        return (e: React.ChangeEvent<HTMLInputElement>) => {\n            setValueCallback((e.target.value === \"\") ? \"\" : Number(e.target.value));\n        }\n    }\n\n    const onChangeLowerThreshold = (newLt: number | string) => {\n        setLt(newLt);\n        setNeedApply(true);\n\n        const newState: DalgonaState = {...dalgonaState};\n        newState.threshold1 = (typeof newLt === \"number\") ? newLt : undefined;\n        dispatch(changeDalgonaState(newState));\n    }\n\n    const onChangeUpperThreshold = (newUt: number | string) => {\n        setUt(newUt);\n        setNeedApply(true);\n\n        const newState: DalgonaState = {...dalgonaState};\n        newState.threshold2 = (typeof newUt === \"number\") ? newUt : undefined;\n        dispatch(changeDalgonaState(newState));\n    }\n\n    const onChangeLtAutoCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const checked = event.target.checked;\n        const newLt = checked ? \"\" : 0.01;\n\n        onChangeLowerThreshold(newLt);\n    }\n\n    const onChangeUtAutoCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const checked = event.target.checked;\n        const newUt = checked ? \"\" : 0.5;\n\n        onChangeUpperThreshold(newUt);\n    }\n\n    const onClickGenerateBtn = () => {\n        const newState: DalgonaState = {...dalgonaState};\n        newState.generate = true;\n        dispatch(changeDalgonaState(newState));\n\n        gtag.event({\n            action: \"download\",\n            category: \"click\",\n            label: \"\",\n            value: 0\n        });\n    };\n\n    return (\n        <form>\n            <Box>\n                <input type=\"file\" id=\"input-photo\" accept=\"image/*\" onChange={onChangeFileInput}\n                       disabled={dalgonaState.isLoading}/>\n                <Tooltip title=\"Select image\">\n                    <>\n                        <label htmlFor=\"input-photo\">\n                            <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\"\n                                        disabled={dalgonaState.isLoading}>\n                                <PhotoCamera fontSize=\"large\"/>\n                            </IconButton>\n                        </label>\n                    </>\n                </Tooltip>\n            </Box>\n            <Box>\n                <Grid container spacing={2} alignItems=\"center\">\n                    <Grid item xs={6}>\n                        <Typography id=\"lt-slider\" gutterBottom>Threshold 1</Typography>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <FormGroup>\n                            <FormControlLabel control={<Checkbox\n                                disabled={dalgonaState.isLoading}\n                                checked={dalgonaState.threshold1 === undefined}\n                                onChange={onChangeLtAutoCheckbox}\n                            />} label={\"auto\"}/>\n                        </FormGroup>\n                    </Grid>\n                </Grid>\n            </Box>\n            <Box>\n                <Grid container spacing={2} alignItems=\"center\">\n                    <Grid item xs={12}>\n                        <Slider track={false}\n                                aria-labelledby=\"lt-slider\"\n                                valueLabelDisplay=\"auto\"\n                                value={dalgonaState.threshold1 === undefined ? 0.0 : dalgonaState.threshold1}\n                                onChange={onChangeSlider(onChangeLowerThreshold)}\n                                step={1}\n                                min={0}\n                                max={255}\n                                disabled={dalgonaState.isLoading}\n                        />\n                    </Grid>\n                </Grid>\n            </Box>\n\n            <Box>\n                <Grid container spacing={2} alignItems=\"center\">\n                    <Grid item xs={6}>\n                        <Typography id=\"ut-slider\" gutterBottom>\n                            Threshold 2\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <FormGroup>\n                            <FormControlLabel control={<Checkbox\n                                disabled={dalgonaState.isLoading}\n                                checked={dalgonaState.threshold2 === undefined}\n                                onChange={onChangeUtAutoCheckbox}\n                            />} label={\"auto\"}/>\n                        </FormGroup>\n                    </Grid>\n                </Grid>\n            </Box>\n            <Box>\n                <Grid container spacing={2} alignItems=\"center\">\n                    {/*<Grid item xs={1}/>*/}\n                    <Grid item xs={12}>\n                        <Slider track={false}\n                                aria-labelledby=\"ut-slider\"\n                                valueLabelDisplay=\"auto\"\n                                value={dalgonaState?.threshold2 ?? 0.0}\n                                onChange={onChangeSlider(onChangeUpperThreshold)}\n                                step={1}\n                                min={0}\n                                max={255}\n                                disabled={dalgonaState.isLoading}\n                        />\n                    </Grid>\n                </Grid>\n            </Box>\n            <Box>\n                <Typography id=\"scale-slider\" gutterBottom>\n                    Image scale\n                </Typography>\n                <Grid container spacing={2} alignItems=\"center\">\n                    <Grid item xs>\n                        <Slider track={false}\n                                aria-labelledby=\"scale-slider\"\n                                valueLabelDisplay=\"auto\"\n                                value={typeof scale === \"number\" ? scale : 1.0}\n                                onChange={onChangeSlider(setScale)}\n                                step={0.1}\n                                min={0.1}\n                                max={3.0}\n                                disabled={dalgonaState.isLoading}\n                        />\n                    </Grid>\n                </Grid>\n            </Box>\n            <Box style={{marginTop: \"18px\"}}>\n                <Grid container spacing={2} alignItems=\"center\">\n                    {dalgonaState.isLoading ?\n                        <>\n                            <Grid item xs={5}/>\n                            <Grid item xs={2}>\n                                <CircularProgress/>\n                            </Grid>\n                            <Grid item xs={5}/>\n                        </>\n                        :\n                        <>\n                            <Grid item xs={6}>\n                                <Button\n                                    style={{width: \"100%\"}}\n                                    variant={needApply?\"contained\":\"outlined\"}\n                                    onClick={onClickApplyBtn}\n                                    startIcon={<AutoFixHighIcon/>}>\n                                    Apply\n                                </Button>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Button\n                                    style={{width: \"100%\"}}\n                                    variant=\"outlined\"\n                                    onClick={onClickGenerateBtn}\n                                    startIcon={<DownloadIcon/>}>\n                                    Generate\n                                </Button>\n                            </Grid>\n                        </>\n                    }\n\n                </Grid>\n            </Box>\n        </form>\n    )\n};\n\nexport default DalgonaForm;\n","export default __webpack_public_path__ + \"static/media/background.d52b6394.png\";","export default __webpack_public_path__ + \"static/media/mask.5c3c32d3.png\";","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface ResultImageState {\n    dataUrl?: string\n}\n\nexport const resultImageState = createSlice({\n    name: \"result-image-state\",\n    initialState: {\n        dataUrl: undefined\n    } as ResultImageState,\n    reducers: {\n        changeResultImageState(state, action: PayloadAction<ResultImageState>) {\n            return action.payload;\n        }\n    },\n})\n\nexport const { changeResultImageState } = resultImageState.actions;\nexport default resultImageState.reducer;\n","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport React, {FunctionComponent} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport cv from \"@techstark/opencv-js\";\nimport {ReducerType} from \"../rootReducer\";\nimport {DalgonaState, changeDalgonaState} from \"../slices/dalgona-state\";\nimport backgroundImg from \"../images/background.png\";\nimport maskImg from \"../images/mask.png\";\nimport {changeResultImageState, ResultImageState} from \"../slices/result-image-state\";\n\ndeclare namespace IDalgonaCanvas {\n    export interface IProps {\n        imgBuf?: ArrayBuffer,\n    }\n}\n\nconst toBase64 = (buffer: ArrayBuffer) => {\n    const arr = new Uint8Array(buffer)\n    return btoa(\n        arr.reduce((data, byte) => data + String.fromCharCode(byte), '')\n    );\n}\n\nconst convertToImageDataUrl = (imageBuffer: ArrayBuffer) => `data:image/png;base64,${toBase64(imageBuffer)}`\n\nconst DalgonaCanvas: FunctionComponent<IDalgonaCanvas.IProps> = ({imgBuf}) => {\n    const CANVAS_BASE_WIDTH = 1543;\n    const CANVAS_BASE_HEIGHT = 770;\n\n    const BASE_POS_X = 818;\n    const BASE_POS_Y = 376;\n\n    // const border\n    const DALGONA_BORDER_COLOR = {\n        r: 82,\n        g: 48,\n        b: 12\n    }\n\n    const canvasBackgroundRef = React.useRef<HTMLCanvasElement>(null);\n    const canvasPictureRef = React.useRef<HTMLCanvasElement>(null);\n    const canvasEdgeRef = React.useRef<HTMLCanvasElement>(null);\n    const canvasDownloadRef = React.useRef<HTMLCanvasElement>(null);\n\n    const imagePictureRef = React.useRef<HTMLImageElement>(null);\n    const imageMaskRef = React.useRef<HTMLImageElement>(null);\n    const imageEdgeRef = React.useRef<HTMLImageElement>(null);\n\n    const [isDragging, setIsDragging] = React.useState<boolean>(false);\n    const [mousePos, setMousePos] = React.useState<{ x: number, y: number }>({x: 0, y: 0});\n    const [imageRelativePos, setImageRelativePos] = React.useState<{ x: number, y: number }>({\n        x: BASE_POS_X,\n        y: BASE_POS_Y\n    });\n\n    const dalgonaState = useSelector<ReducerType, DalgonaState>(state => state.dalgonaState);\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (dalgonaState.generate) {\n            downloadImage();\n        }\n    }, [dalgonaState.generate]);\n\n    React.useEffect(() => {\n        buildPictureCanvasAsync(imageRelativePos.x, imageRelativePos.y).then();\n    }, [dalgonaState.scale]);\n\n    const loadImageAsync = async (imageUrl: string): Promise<HTMLImageElement> => {\n        return new Promise(((resolve, reject) => {\n            const img = new Image()\n            img.src = imageUrl\n            img.crossOrigin = 'Anonymous'\n            img.onload = function () {\n                console.timeEnd('loadImage')\n                resolve(img)\n            }\n        }));\n    }\n\n    const resetBackgroundAsync = async () => {\n        if (typeof canvasBackgroundRef === \"undefined\") {\n            console.time(\"canvasBackgroundRef is undefined\");\n            return;\n        }\n        const canvas = canvasBackgroundRef.current;\n        if (canvas === null) {\n            console.log(\"canvasBackgroundRef.current is null\");\n            return;\n        }\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx === null)\n            return;\n        ctx.drawImage(await loadImageAsync(backgroundImg), 0, 0);\n        ctx.save();\n    }\n\n\n    const buildPictureCanvasAsync = async (fixedX: number, fixedY: number) => {\n        if (typeof canvasPictureRef === \"undefined\" || canvasPictureRef === null) {\n            console.time(\"canvasPictureRef is undefined or null\");\n            return;\n        }\n        if (imagePictureRef === null) {\n            console.time(\"imageRef is null\");\n            return;\n        }\n\n        const canvas = canvasPictureRef.current;\n        if (canvas === null) {\n            console.log(\"canvasPictureRef.current is null\");\n            return;\n        }\n\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx === null)\n            return;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.beginPath();\n\n        // mask for clipping\n        ctx.drawImage(imageMaskRef.current!, 0, 0);\n        ctx.save();\n\n        ctx.translate(CANVAS_BASE_WIDTH / 2, CANVAS_BASE_HEIGHT / 2);\n\n        ctx.globalCompositeOperation = \"source-in\";\n\n        // // calculate position\n        const posX = (-CANVAS_BASE_WIDTH / 2 + fixedX) * dalgonaState.scale;\n        const posY = (-CANVAS_BASE_HEIGHT / 2 + fixedY) * dalgonaState.scale;\n\n        console.log(`posX: ${posX}, posY: ${posY}`);\n\n        const edgeImage = imageEdgeRef.current!;\n        const imWidth = parseInt(edgeImage.width + '') * dalgonaState.scale;\n        const imHeight = parseInt(edgeImage.height + '') * dalgonaState.scale;\n        ctx.drawImage(edgeImage, posX, posY, imWidth, imHeight);\n\n        ctx.restore();\n    }\n\n    const downloadImage = () => {\n        const backgroundCanvas = canvasBackgroundRef.current!;\n        const pictureCanvas = canvasPictureRef.current!;\n\n        const downloadCanvas = canvasDownloadRef.current!;\n        const downloadContext = downloadCanvas.getContext('2d')!;\n\n        downloadContext.drawImage(backgroundCanvas, 0, 0);\n        downloadContext.drawImage(pictureCanvas, 0, 0);\n\n        const newResultImageState:ResultImageState = {\n            dataUrl: downloadCanvas.toDataURL()\n        };\n        dispatch(changeResultImageState(newResultImageState));\n\n        const newDalgonaState:DalgonaState = {...dalgonaState};\n        newDalgonaState.generate = false;\n        dispatch(changeDalgonaState(newDalgonaState));\n    }\n\n    React.useEffect(() => {\n        resetBackgroundAsync().then();\n    }, [canvasBackgroundRef]);\n\n    React.useEffect(() => {\n        if (imgBuf === undefined)\n            return;\n        if (imagePictureRef === null)\n            return;\n        if (imageMaskRef === null)\n            return;\n\n        onLoading(true);\n\n        dispatch(changeResultImageState({dataUrl:undefined}));\n\n        const imageMask = imageMaskRef.current!;\n        imageMask.onload = () => {\n            const imagePicture = imagePictureRef.current!;\n            imagePicture.onload = () => {\n                if (imgBuf === undefined)\n                    return;\n\n                const canvas = canvasEdgeRef.current!;\n                const ctx = canvas.getContext('2d')!;\n                ctx.clearRect(0, 0, imagePicture.width, imagePicture.height);\n                canvas.height = imagePicture.height;\n                canvas.width = imagePicture.width;\n                console.log(`width: ${canvas.width}`);\n                console.log(`height: ${canvas.height}`);\n\n                ctx.drawImage(imagePicture, 0, 0, imagePicture.width, imagePicture.height);\n                ctx.save();\n                // const imageData = ctx!.getImageData(0, 0, imagePicture.width, imagePicture.height);\n                // detect(imageData.data as any as Uint8Array, imagePicture.width, imagePicture.height, dalgonaState.threshold1, dalgonaState.threshold2, onDetectCallback);\n                processImage();\n\n                console.log(\"onload\");\n            };\n            imagePicture.src = convertToImageDataUrl(imgBuf);\n\n        }\n        imageMask.src = maskImg;\n    }, [imgBuf, imagePictureRef, imageMaskRef]);\n\n    const onLoading = (isLoading: boolean) => {\n        const newDalgonaState:DalgonaState = {...dalgonaState};\n        newDalgonaState.isLoading = isLoading;\n        dispatch(changeDalgonaState(newDalgonaState));\n    }\n\n    const postprocess = (buffer: number[]): Uint8ClampedArray => {\n        const pixels = new Uint8ClampedArray(buffer);\n\n        // 색상 반전 및\n        for (let i = 0; i < pixels.length; i += 4) {\n            // 색상 뒤짚기\n            let r = 255 - pixels[i];\n            let g = 255 - pixels[i + 1];\n            let b = 255 - pixels[i + 2];\n\n            if (r === 255 && g === 255 && b === 255) {\n                pixels[i + 3] = 0;\n            } else {\n                r += DALGONA_BORDER_COLOR.r;\n                g += DALGONA_BORDER_COLOR.g;\n                b += DALGONA_BORDER_COLOR.b;\n            }\n\n            pixels[i] = r;\n            pixels[i + 1] = g;\n            pixels[i + 2] = b;\n        }\n\n        return pixels;\n    }\n\n    const processImage = () => {\n        const canvasEdge = canvasEdgeRef.current!;\n\n        const threshold1 = dalgonaState.threshold1 ?? 100;\n        const threshold2 = dalgonaState.threshold2 ?? 100;\n\n        const img = cv.imread(canvasEdge);\n\n        // to gray scale\n        const imgGray = new cv.Mat();\n        cv.cvtColor(img, imgGray, cv.COLOR_BGR2GRAY);\n\n        // detect edges using Canny\n        const edges = new cv.Mat();\n        cv.Canny(imgGray, edges, threshold1, threshold2);\n        cv.imshow(canvasEdge, edges);\n\n        const ctx = canvasEdge!.getContext('2d')!;\n        const imageData = ctx.getImageData(0, 0, canvasEdge.width, canvasEdge.height);\n        ctx.clearRect(0, 0, canvasEdge.width, canvasEdge.height)\n\n        const pixels = postprocess(Array.from(new Uint8Array(imageData.data.buffer)));\n\n        const newImageData = new ImageData(pixels, canvasEdge.width, canvasEdge.height);\n        ctx.putImageData(newImageData, 0, 0);\n\n        // 덧칠\n        ctx.shadowBlur = 1;\n        ctx.shadowColor = `rgb(${DALGONA_BORDER_COLOR.r}, ${DALGONA_BORDER_COLOR.g}, ${DALGONA_BORDER_COLOR.b})`;\n        ctx.drawImage(canvasEdge, 0, 0);\n\n        const relativePosX = BASE_POS_X - (canvasEdge.width / 2);\n        const relativePosY = BASE_POS_Y - (canvasEdge.height / 2);\n        console.log(`relativePosX: ${relativePosX}, relativePosY: ${relativePosY}`);\n        setImageRelativePos({x: relativePosX, y: relativePosY});\n        setMousePos({x: 0, y: 0});\n\n\n        const imageEdge = imageEdgeRef.current!;\n        imageEdge.onload = async () => {\n            await buildPictureCanvasAsync(relativePosX, relativePosY);\n\n            const newState:DalgonaState = {...dalgonaState};\n            newState.isLoading = false;\n            if (newState.threshold1 === undefined)\n                newState.threshold1 = threshold1;\n            if (newState.threshold2 === undefined)\n                newState.threshold2 = threshold2;\n\n            dispatch(changeDalgonaState(newState));\n        }\n\n        imageEdge.src = canvasEdge.toDataURL();\n\n    }\n\n    const onMouseMove = async (e: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!isDragging) {\n            return;\n        }\n\n        const newMousePos = {x: e.pageX, y: e.pageY};\n        const gap = {\n            x: newMousePos.x - mousePos.x,\n            y: newMousePos.y - mousePos.y\n        };\n\n        const newImageRelativePos = {\n            x: imageRelativePos.x + gap.x,\n            y: imageRelativePos.y + gap.y\n        }\n\n        setMousePos(newMousePos);\n        setImageRelativePos(newImageRelativePos);\n\n        await buildPictureCanvasAsync(newImageRelativePos.x, newImageRelativePos.y);\n    }\n\n    const onMouseDown = (e: React.MouseEvent<HTMLCanvasElement>) => {\n        setIsDragging(true);\n        const newMousePos = {x: e.pageX, y: e.pageY};\n        setMousePos(newMousePos);\n\n        console.log(`mouse down {x: ${e.pageX}, y: ${e.pageY}}`);\n    }\n    const onMouseUp = (_: React.MouseEvent<HTMLCanvasElement>) => {\n        setIsDragging(false);\n        console.log(\"mouse up\")\n    }\n\n    return (\n        <>\n            <div style={{position: \"relative\", padding: 0, margin: 0}}>\n                <canvas ref={canvasBackgroundRef} width={CANVAS_BASE_WIDTH} height={CANVAS_BASE_HEIGHT}\n                        style={{position: \"relative\", width: \"100%\", zIndex: 1}}/>\n                <canvas ref={canvasPictureRef} width={CANVAS_BASE_WIDTH} height={CANVAS_BASE_HEIGHT}\n                        style={{position: \"absolute\", width: \"100%\", zIndex: 2, top: 0, left: 0}}\n                        onMouseDown={onMouseDown} onMouseUp={onMouseUp} onMouseMove={onMouseMove}/>\n                <canvas ref={canvasEdgeRef} width={CANVAS_BASE_WIDTH} height={CANVAS_BASE_HEIGHT}\n                        style={{visibility: \"hidden\", width: \"100%\", zIndex: 2, display: \"none\"}}/>\n                <canvas ref={canvasDownloadRef} width={CANVAS_BASE_WIDTH} height={CANVAS_BASE_HEIGHT}\n                        style={{visibility: \"hidden\", width: \"100%\", zIndex: 2, display: \"none\"}}/>\n                <img ref={imagePictureRef} style={{visibility: \"hidden\", display: \"none\"}} alt=\"\"/>\n                <img ref={imageMaskRef} style={{visibility: \"hidden\", display: \"none\"}} alt=\"\"/>\n                <img ref={imageEdgeRef} style={{visibility: \"hidden\", display: \"none\"}} alt=\"\"/>\n            </div>\n        </>\n    );\n}\n\nexport default DalgonaCanvas;\n","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from '@mui/material/Toolbar';\n\nconst DalgonaHeader = () => {\n    return <AppBar position={\"static\"} style={{backgroundColor:\"white\", color:\"#333\", boxShadow:\"none\", border: \"1px solid #ddd\"}}>\n        <Toolbar>\n            {/*<h4>Dalgona meme generator</h4>*/}\n            <Typography variant=\"h5\" component=\"h5\" sx={{flexGrow: 1, fontWeight:600}}>\n                <span style={{color:\"#ab9065\"}}>Dalgona</span> meme generator\n            </Typography>\n        </Toolbar>\n    </AppBar>;\n}\n\nexport default DalgonaHeader;\n","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport React from \"react\";\nimport Container from \"@mui/material/Container\";\nimport Typography from \"@mui/material/Typography\";\nimport GitHubIcon from '@mui/icons-material/GitHub';\n\n\nconst DalgonaFooter = () => {\n    return <Container id=\"footer\" maxWidth={\"lg\"} sx={{marginTop: \"15px\", paddingTop: \"15px\", borderTop:\"1px solid #eee\"}}>\n        <Typography component=\"div\" sx={{flexGrow: 1}}>\n            Developed by <a href=\"https://rajephon.dev\" target=\"_blank\">rajephon</a> / <a href=\"https://github.com/rajephon/dalgona-meme\" target=\"_blank\"><GitHubIcon fontSize=\"inherit\" /> Github</a><br />\n            <a href=\"https://github.com/rajephon/dalgona-meme/issues\" target=\"_blank\">Report bug &amp; issue</a>\n        </Typography>\n\n    </Container>;\n}\n\nexport default DalgonaFooter;\n","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport React from \"react\";\nimport Container from \"@mui/material/Container\";\nimport {useSelector} from \"react-redux\";\nimport {ReducerType} from \"../rootReducer\";\nimport {ResultImageState} from \"../slices/result-image-state\";\n\nconst AlwaysScrollToBottom = () => {\n    const elementRef = React.useRef<HTMLDivElement>(null);\n    React.useEffect(() => elementRef?.current?.scrollIntoView());\n    return <div ref={elementRef} />;\n};\n\nconst DalgonaResult = () => {\n    const resultImageState = useSelector<ReducerType, ResultImageState>(state => state.resultImageState);\n\n    return <Container maxWidth={\"lg\"} sx={{marginTop: \"15px\", paddingTop: \"15px\", borderTop:\"1px solid #eee\"}}>\n        {resultImageState.dataUrl && <>\n            <img src={resultImageState.dataUrl} style={{width: \"100%\"}} />\n            <AlwaysScrollToBottom/>\n        </>}\n    </Container>\n}\n\nexport default DalgonaResult;\n","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport React from 'react';\nimport './App.css';\nimport Grid from \"@mui/material/Grid\";\nimport Container from \"@mui/material/Container\";\nimport DalgonaForm from \"./components/dalgona-form\";\nimport DalgonaCanvas from \"./components/dalgona-canvas\";\nimport DalgonaHeader from \"./components/dalgona-header\";\nimport DalgonaFooter from \"./components/dalgona-footer\";\nimport DalgonaResult from \"./components/dalgona-result\";\n\nfunction App() {\n    const [imgBuf, setImgBuf] = React.useState<ArrayBuffer>();\n\n    const onClickGenerate = (newImgBuf: ArrayBuffer) => {\n        setImgBuf(newImgBuf);\n    }\n\n    return (<>\n            <DalgonaHeader />\n            <Container maxWidth={\"lg\"} sx={{marginTop: \"15px\"}}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} md={8}>\n                        <DalgonaCanvas imgBuf={imgBuf} />\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                        <DalgonaForm onClickGenerate={onClickGenerate} />\n                    </Grid>\n                    <Grid item xs={12} md={12}>\n                        <DalgonaResult />\n                    </Grid>\n                </Grid>\n            </Container>\n            <DalgonaFooter/>\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport { combineReducers } from \"@reduxjs/toolkit\";\nimport dalgonaState from './slices/dalgona-state';\nimport resultImageState from \"./slices/result-image-state\";\n\nconst reducer = combineReducers({\n    dalgonaState, resultImageState\n});\n\nexport type ReducerType = ReturnType<typeof reducer>;\nexport default reducer;\n\n","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport reducer from './rootReducer';\nimport logger from 'redux-logger';\n\nconst store = configureStore({\n    reducer,\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n});\n\nexport type AppDispatch = typeof store.dispatch\nexport default store;\n","// Copyright (c) 2021. Chanwoo Noh <rajephon@gmail.com>. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}